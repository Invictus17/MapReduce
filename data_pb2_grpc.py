# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import data_pb2 as data__pb2


class masterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.download_files = channel.unary_stream(
                '/master/download_files',
                request_serializer=data__pb2.mapper_request.SerializeToString,
                response_deserializer=data__pb2.chunk.FromString,
                )
        self.upload_files = channel.stream_unary(
                '/master/upload_files',
                request_serializer=data__pb2.reducer_chunk.SerializeToString,
                response_deserializer=data__pb2.ack.FromString,
                )


class masterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def download_files(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_files(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_masterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'download_files': grpc.unary_stream_rpc_method_handler(
                    servicer.download_files,
                    request_deserializer=data__pb2.mapper_request.FromString,
                    response_serializer=data__pb2.chunk.SerializeToString,
            ),
            'upload_files': grpc.stream_unary_rpc_method_handler(
                    servicer.upload_files,
                    request_deserializer=data__pb2.reducer_chunk.FromString,
                    response_serializer=data__pb2.ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class master(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def download_files(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/master/download_files',
            data__pb2.mapper_request.SerializeToString,
            data__pb2.chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_files(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/master/upload_files',
            data__pb2.reducer_chunk.SerializeToString,
            data__pb2.ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
